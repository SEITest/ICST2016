com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseLessOrEqualComparisonRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseHyphenRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseWildcardRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseLessComparisonRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParsePartialVersionRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseNotExpression
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseGreaterComparisonRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseCaretRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldRespectPrecedenceWhenUsedWithParentheses
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseMultipleRangesJoinedWithOr
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseTildeRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseMultipleRangesJoinedWithAnd
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseExpressionWithMultipleParentheses
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseEqualComparisonRangeIfOnlyFullVersionGiven
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseGreaterOrEqualComparisonRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseEqualComparisonRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseNotEqualComparisonRange
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseComplexExpressions
com.github.zafarkhaja.semver.expr.ExpressionParserTest.shouldParseParenthesizedExpression
com.github.zafarkhaja.semver.util.StreamTest.shouldLookaheadWithoutConsuming
com.github.zafarkhaja.semver.util.StreamTest.shouldNotReturnRealElementsArray
com.github.zafarkhaja.semver.util.StreamTest.shouldKeepTrackOfCurrentOffset
com.github.zafarkhaja.semver.util.StreamTest.shouldBeBackedByArray
com.github.zafarkhaja.semver.util.StreamTest.shouldCheckIfLookaheadIsOfExpectedTypes
com.github.zafarkhaja.semver.util.StreamTest.shouldImplementIterable
com.github.zafarkhaja.semver.util.StreamTest.shouldLookaheadArbitraryNumberOfElements
com.github.zafarkhaja.semver.util.StreamTest.shouldStopPushingBackWhenThereAreNoElements
com.github.zafarkhaja.semver.util.StreamTest.shouldConsumeElementsOneByOne
com.github.zafarkhaja.semver.util.StreamTest.shouldPushBackOneElementAtATime
com.github.zafarkhaja.semver.util.StreamTest.shouldRaiseErrorWhenUnexpectedElementConsumed
com.github.zafarkhaja.semver.util.StreamTest.shouldCheckIfElementOfExpectedTypesExistUntilGivenPosition
com.github.zafarkhaja.semver.util.StreamTest.shouldCheckIfElementOfExpectedTypesExistBeforeGivenType
com.github.zafarkhaja.semver.util.StreamTest.shouldReturnArrayOfElementsThatAreLeftInStream
com.github.zafarkhaja.semver.expr.AndTest.shouldCheckIfBothExpressionsEvaluateToTrue
com.github.zafarkhaja.semver.MetadataVersionTest$ToStringMethodTest.shouldReturnStringRepresentation
com.github.zafarkhaja.semver.MetadataVersionTest$HashCodeMethodTest.shouldReturnSameHashCodeIfVersionsAreEqual
com.github.zafarkhaja.semver.MetadataVersionTest$EqualsMethodTest.shouldBeReflexive
com.github.zafarkhaja.semver.MetadataVersionTest$EqualsMethodTest.shouldBeSymmetric
com.github.zafarkhaja.semver.MetadataVersionTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsOfDifferentType
com.github.zafarkhaja.semver.MetadataVersionTest$EqualsMethodTest.shouldBeTransitive
com.github.zafarkhaja.semver.MetadataVersionTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsNull
com.github.zafarkhaja.semver.MetadataVersionTest$EqualsMethodTest.shouldBeConsistent
com.github.zafarkhaja.semver.MetadataVersionTest$NullMetadataVersionTest.shouldThrowNullPointerExceptionIfIncremented
com.github.zafarkhaja.semver.MetadataVersionTest$NullMetadataVersionTest.shouldReturnZeroWhenComparedToNullMetadataVersion
com.github.zafarkhaja.semver.MetadataVersionTest$NullMetadataVersionTest.shouldReturnPositiveWhenComparedToNonNullMetadataVersion
com.github.zafarkhaja.semver.MetadataVersionTest$NullMetadataVersionTest.shouldBeEqualOnlyToItsType
com.github.zafarkhaja.semver.MetadataVersionTest$NullMetadataVersionTest.shouldReturnEmptyStringOnToString
com.github.zafarkhaja.semver.MetadataVersionTest$NullMetadataVersionTest.shouldReturnZeroOnHashCode
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldOverrideEqualsMethod
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldComapareDigitsOnlyIdentifiersNumerically
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldProvideIncrementMethod
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldReturnNegativeWhenComparedToNullMetadataVersion
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldCompareMixedIdentifiersLexicallyInAsciiSortOrder
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldCompareIdentifiersCountIfCommonIdentifiersAreEqual
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldAppendOneAsLastIdentifierIfLastOneIsAlphaNumericWhenIncrementing
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.shouldBeImmutable
com.github.zafarkhaja.semver.MetadataVersionTest$CoreFunctionalityTest.mustCompareEachIdentifierSeparately
com.github.zafarkhaja.semver.expr.LessOrEqualTest.shouldCheckIfVersionIsLessThanOrEqualToParsedVersion
com.github.zafarkhaja.semver.expr.LexerTest.shouldRaiseErrorOnIllegalCharacter
com.github.zafarkhaja.semver.expr.LexerTest.shouldEndWithEol
com.github.zafarkhaja.semver.expr.LexerTest.shouldSkipWhitespaces
com.github.zafarkhaja.semver.expr.LexerTest.shouldTokenizeVersionString
com.github.zafarkhaja.semver.expr.EqualTest.shouldCheckIfVersionIsEqualToParsedVersion
com.github.zafarkhaja.semver.VersionParserTest.shouldParseValidSemVer
com.github.zafarkhaja.semver.VersionParserTest.shouldRaiseErrorForEmptyBuildIdentifier
com.github.zafarkhaja.semver.VersionParserTest.shouldParsePreReleaseVersion
com.github.zafarkhaja.semver.VersionParserTest.shouldRaiseErrorIfNumericIdentifierHasLeadingZeroes
com.github.zafarkhaja.semver.VersionParserTest.shouldNotAllowDigitsInPreReleaseVersion
com.github.zafarkhaja.semver.VersionParserTest.shouldRaiseErrorForIllegalInputString
com.github.zafarkhaja.semver.VersionParserTest.shouldParseNormalVersion
com.github.zafarkhaja.semver.VersionParserTest.shouldAllowDigitsInBuildMetadata
com.github.zafarkhaja.semver.VersionParserTest.shouldParseBuildMetadata
com.github.zafarkhaja.semver.VersionParserTest.shouldRaiseErrorForEmptyPreReleaseIdentifier
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByDot
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByEol
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByIllegal
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByPlus
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByDigit
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldReturnCharTypeForCharacter
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByHyphen
com.github.zafarkhaja.semver.VersionParserCharTypeTest.shouldBeMatchedByLetter
com.github.zafarkhaja.semver.expr.LexerTokenTest$HashCodeMethodTest.shouldReturnSameHashCodeIfTokensAreEqual
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldReturnFalseIfLexemesAreDifferent
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldReturnFalseIfPositionsAreDifferent
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldBeReflexive
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldBeSymmetric
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldReturnFalseIfTypesAreDifferent
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsOfDifferentType
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldBeTransitive
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsNull
com.github.zafarkhaja.semver.expr.LexerTokenTest$EqualsMethodTest.shouldBeConsistent
com.github.zafarkhaja.semver.expr.NotEqualTest.shouldCheckIfVersionIsNotEqualToParsedVersion
com.github.zafarkhaja.semver.expr.GreaterTest.shouldCheckIfVersionIsGreaterThanParsedVersion
com.github.zafarkhaja.semver.expr.LessTest.shouldCheckIfVersionIsLessThanParsedVersion
com.github.zafarkhaja.semver.expr.OrTest.shouldCheckIfOneOfTwoExpressionsEvaluateToTrue
com.github.zafarkhaja.semver.expr.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1)]
com.github.zafarkhaja.semver.expr.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[(&gt;1.0.1]
com.github.zafarkhaja.semver.expr.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[((&gt;=1 &amp; &lt;2)]
com.github.zafarkhaja.semver.expr.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[&gt;=1.0.0 &amp;]
com.github.zafarkhaja.semver.expr.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[(&gt;2.0 |)]
com.github.zafarkhaja.semver.expr.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[&amp; 1.2]
com.github.zafarkhaja.semver.expr.NotTest.shouldRevertBooleanResultOfExpression
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1 ]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[a.b.c]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.b.c]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.c]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[!.2.3]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.!.3]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.!]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[v1.2.3]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2. 3]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3=alpha]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3~beta]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-be$ta]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3+b1+b2]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-rc!]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-+]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-@]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3+@]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-rc.]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3+b.]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-b.+b]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-rc..]
com.github.zafarkhaja.semver.ParserErrorHandlingTest.shouldCorrectlyHandleParseErrors[1.2.3-a+b..]
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportLessOrEqualExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportEqualExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportComplexExpressions
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportAndExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportOrExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportGreaterOrEqualExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportLessExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportNotExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportNotEqualExpression
com.github.zafarkhaja.semver.expr.CompositeExpressionTest.shouldSupportGreaterExpression
com.github.zafarkhaja.semver.NormalVersionTest$ToStringMethodTest.shouldReturnStringRepresentation
com.github.zafarkhaja.semver.NormalVersionTest$HashCodeMethodTest.shouldReturnSameHashCodeIfVersionsAreEqual
com.github.zafarkhaja.semver.NormalVersionTest$EqualsMethodTest.shouldBeReflexive
com.github.zafarkhaja.semver.NormalVersionTest$EqualsMethodTest.shouldBeSymmetric
com.github.zafarkhaja.semver.NormalVersionTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsOfDifferentType
com.github.zafarkhaja.semver.NormalVersionTest$EqualsMethodTest.shouldBeTransitive
com.github.zafarkhaja.semver.NormalVersionTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsNull
com.github.zafarkhaja.semver.NormalVersionTest$EqualsMethodTest.shouldBeConsistent
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.shouldOverrideEqualsMethod
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.mustConsistOfMajorMinorAndPatchVersions
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.mustIncreaseEachElementNumericallyByIncrementsOfOne
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.shouldAcceptOnlyNonNegativeMajorMinorAndPatchVersions
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.mustResetPatchToZeroWhenMinorIsIncremented
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.shoudBeImmutable
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.mustCompareMajorMinorAndPatchNumerically
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.mustResetMinorAndPatchToZeroWhenMajorIsIncremented
com.github.zafarkhaja.semver.NormalVersionTest$CoreFunctionalityTest.mustTakeTheFormOfXDotYDotZWhereXyzAreNonNegativeIntegers
com.github.zafarkhaja.semver.expr.GreaterOrEqualTest.shouldCheckIfVersionIsGreaterThanOrEqualToParsedVersion
com.github.zafarkhaja.semver.VersionTest$BuildAwareOrderTest.shouldCorrectlyCompareAllVersionsWithBuildMetadata
com.github.zafarkhaja.semver.VersionTest$BuilderTest.shouldBuildVersionInSteps
com.github.zafarkhaja.semver.VersionTest$BuilderTest.shouldBuildVersionWithPreReleaseVersionAndBuildMetadata
com.github.zafarkhaja.semver.VersionTest$BuilderTest.shouldBuildVersionWithPreReleaseVersion
com.github.zafarkhaja.semver.VersionTest$BuilderTest.shouldBuildVersionWithBuildMetadata
com.github.zafarkhaja.semver.VersionTest$BuilderTest.shouldBuildVersionFromNormalVersion
com.github.zafarkhaja.semver.VersionTest$BuilderTest.shouldImplementFluentInterface
com.github.zafarkhaja.semver.VersionTest$ToStringMethodTest.shouldReturnStringRepresentation
com.github.zafarkhaja.semver.VersionTest$HashCodeMethodTest.shouldReturnSameHashCodeIfVersionsAreEqual
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldBeReflexive
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldBeSymmetric
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldIgnoreBuildMetadataWhenCheckingForEquality
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsOfDifferentType
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldBeTransitive
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldReturnFalseIfOtherVersionIsNull
com.github.zafarkhaja.semver.VersionTest$EqualsMethodTest.shouldBeConsistent
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldOverrideEqualsMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldHaveStaticFactoryMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideSetBuildMetadataMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldHaveLessThanOrEqualToMethodReturningBoolean
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldIncrementPatchVersionWithPreReleaseIfProvided
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideIncrementPreReleaseVersionMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldIgnoreBuildMetadataWhenDeterminingVersionPrecedence
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.mayHaveBuildFollowingPatchOrPreReleaseAppendedWithPlus
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldBeAbleToCompareWithoutIgnoringBuildMetadata
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldHaveGreaterThanMethodReturningBoolean
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideSetPreReleaseVersionMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideIncrementMajorVersionMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideIncrementMinorVersionMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldCheckIfVersionSatisfiesExpression
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldIncrementMajorVersionWithPreReleaseIfProvided
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideIncrementPatchVersionMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldThrowExceptionWhenIncrementingPreReleaseIfItsNull
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldDropBuildMetadataWhenIncrementingPreReleaseVersion
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.mayHavePreReleaseFollowingPatchAppendedWithHyphen
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldBeImmutable
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldDropBuildMetadataWhenIncrementing
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldThrowExceptionWhenIncrementingBuildIfItsNull
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldIncrementMinorVersionWithPreReleaseIfProvided
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.preReleaseShouldHaveLowerPrecedenceThanAssociatedNormal
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldDropBuildMetadataWhenSettingPreReleaseVersion
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldHaveLessThanMethodReturningBoolean
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldCorrectlyCompareAllVersionsFromSpecification
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldProvideIncrementBuildMetadataMethod
com.github.zafarkhaja.semver.VersionTest$CoreFunctionalityTest.shouldHaveGreaterThanOrEqualToMethodReturningBoolean
